Parameters:
  Environment:
    Description: Application environment parameter (dev, prod)
    Type: String
    Default: dev

  ApplicationName:
    Description: Application name
    Type: String
    Default: my-app

  Image:
    Description: Application Image
    Type: String
    Default: httpd:2.4

  MYSQLPASSWORD: 
    NoEcho: true
    Description: password
    Type: String

Mappings:
  Environments:
    dev:
      VPC: vpc-xxx
      Subnets:
        - subnet-xx
        - subnet-xx
        - subnet-xx
      HostedZone: xx
      BackendSSLCert: xx
      BackEndHostName: xx
      FrontEndSSLCert: xx
      FrontEndHostName: xx
      FrontEndS3Bucket: xx
      FrontEndLogsS3Bucket: xx
    qa:
      VPC: vpc-xxx
      Subnets:
        - subnet-xx
        - subnet-xx
        - subnet-xx
      HostedZone: xx
      BackendSSLCert: xx
      BackEndHostName: xx
      FrontEndSSLCert: xx
      FrontEndHostName: xx
      FrontEndS3Bucket: xx
      FrontEndLogsS3Bucket: xx
    # prod:
    #   VPC:
    #   Subnets:
    #     -
    #     -
    #     -

Resources:

  FrontEndS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !FindInMap [Environments, !Ref Environment, FrontEndS3Bucket]

  FrontEndS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref FrontEndS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub "${FrontEndS3Bucket.Arn}/*"

  CloudFrontLogsS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !FindInMap [Environments, !Ref Environment, FrontEndLogsS3Bucket]

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub "${ApplicationName}-${Environment}-ECS-SG"
      GroupDescription: Security group for ecs web access
      VpcId: !FindInMap [Environments, !Ref Environment, VPC]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /server/healthcheck
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Group
          Value: ECS
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !FindInMap [Environments, !Ref Environment, VPC]

  ECSALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ECSSecurityGroup
      Subnets: !FindInMap [Environments, !Ref Environment, Subnets]
      Tags:
        - Key: Group
          Value: ECS
      Type: application
      IpAddressType: ipv4

  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_302
          Type: redirect
      LoadBalancerArn: !Ref ECSALB
      Port: 80
      Protocol: "HTTP"


  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ECSALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !FindInMap [Environments, !Ref Environment, BackendSSLCert]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBListenerdRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ALBTargetGroup
                Weight: 1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
      ListenerArn: !Ref HTTPSListener
      Priority: 1

  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ExecutionRoleArn: !GetAtt 
        - ECSTaskExecutionRole
        - Arn
      ContainerDefinitions:
        - Name: !Sub "${ApplicationName}-${Environment}-Container"
          Image: !Ref Image
          # Image: httpd:2.4
          Essential: true
          PortMappings:
            - HostPort: 80
              Protocol: tcp
              ContainerPort: 80
          Environment:
            - Name: MYSQLPASSWORD
              Value: !Ref MYSQLPASSWORD
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      Family: !Sub "${ApplicationName}-${Environment}-Task"

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub "${ApplicationName}-${Environment}-ECS-Cluster"

  ECSService:
    DependsOn:
      - HTTPListener
      - HTTPSListener
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Sub "${ApplicationName}-${Environment}-ECS-Service"
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      DeploymentController:
        Type: ECS
      LoadBalancers:
        - ContainerName: !Sub "${ApplicationName}-${Environment}-Container"
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref ECSSecurityGroup
          Subnets: !FindInMap [Environments, !Ref Environment, Subnets]  

  BackendDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !FindInMap [Environments, !Ref Environment, HostedZone] 
      Name: !FindInMap [Environments, !Ref Environment, BackEndHostName]
      ResourceRecords:
        - !GetAtt ECSALB.DNSName
      TTL: 30
      Type: CNAME


##Front End

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !FindInMap [Environments, !Ref Environment, FrontEndHostName]
        CacheBehaviors:
          - AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: !Ref CloudFrontCachePolicy
            ViewerProtocolPolicy: https-only
            TargetOriginId: !Sub "${ApplicationName}-${Environment}-FrontEnd"
            PathPattern: /api/*
          - AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: !Ref CloudFrontCachePolicy
            ViewerProtocolPolicy: https-only
            TargetOriginId: !Sub "${ApplicationName}-${Environment}-FrontEnd"
            PathPattern: /server/*
          - AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: !Ref CloudFrontCachePolicy
            ViewerProtocolPolicy: https-only
            TargetOriginId: !Sub "${ApplicationName}-${Environment}-FrontEnd"
            PathPattern: "*"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: !Ref CloudFrontCachePolicy
          ViewerProtocolPolicy: https-only
          TargetOriginId: !Sub "${ApplicationName}-${Environment}-FrontEnd"
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt CloudFrontLogsS3Bucket.DomainName
          IncludeCookies: false
          Prefix: 'cdn/'
        Origins:
          - DomainName: !GetAtt FrontEndS3Bucket.DomainName
            Id: !Sub "${ApplicationName}-${Environment}-FrontEnd"
            S3OriginConfig:
              OriginAccessIdentity:
                !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        PriceClass: 'PriceClass_100'
        ViewerCertificate:
          AcmCertificateArn: !FindInMap [Environments, !Ref Environment, FrontEndSSLCert]
          MinimumProtocolVersion: 'TLSv1.2_2019'
          SslSupportMethod: 'sni-only'
        Restrictions:
          GeoRestriction: 
            Locations: 
              - US
            RestrictionType: whitelist

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !FindInMap [Environments, !Ref Environment, FrontEndHostName]
          
  CloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties: 
      CachePolicyConfig:
        Name: !Sub "${ApplicationName}-${Environment}-CloudFrontCachePolicy"
        DefaultTTL: 0
        MaxTTL: 300
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - User-Agent
          QueryStringsConfig:
            QueryStringBehavior: all

  FrontEndDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !FindInMap [Environments, !Ref Environment, HostedZone] 
      Name: !FindInMap [Environments, !Ref Environment, FrontEndHostName]
      ResourceRecords:
        - !GetAtt CloudFrontDistribution.DomainName
      TTL: 30
      Type: CNAME

